/*
 * This file is part of Sponge, licensed under the MIT License (MIT).
 *
 * Copyright (c) SpongePowered <https://www.spongepowered.org>
 * Copyright (c) contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.spongepowered.test;

import org.spongepowered.api.Sponge;
import org.spongepowered.api.command.CommandException;
import org.spongepowered.api.command.CommandResult;
import org.spongepowered.api.command.args.GenericArguments;
import org.spongepowered.api.command.spec.CommandSpec;
import org.spongepowered.api.data.key.Keys;
import org.spongepowered.api.entity.Entity;
import org.spongepowered.api.entity.living.player.Player;
import org.spongepowered.api.event.Listener;
import org.spongepowered.api.event.entity.InteractEntityEvent;
import org.spongepowered.api.event.filter.cause.Root;
import org.spongepowered.api.event.game.state.GameInitializationEvent;
import org.spongepowered.api.plugin.Plugin;
import org.spongepowered.api.text.Text;
import org.spongepowered.api.text.format.TextColors;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

@Plugin(id = "invulnerabilitytest", name = "InvulnerabilityTest", description = "Tests invulnerability data.", version = "0.0.0")
public final class InvulnerabilityTest {

    private final Map<UUID, Boolean> invulnerable = new HashMap<>();

    @Listener
    public void onInit(final GameInitializationEvent event) {
        Sponge.getCommandManager().register(this,
                CommandSpec.builder()
                        .arguments(GenericArguments.bool(Text.of("value")))
                        .executor((src, args) ->  {
                            if (!(src instanceof Player)) {
                                throw new CommandException(Text.of(TextColors.RED, "You must be a player to execute this command."));
                            }
                            final boolean value = args.<Boolean>getOne("value").orElse(false);
                            this.invulnerable.put(((Player) src).getUniqueId(), value);
                            src.sendMessage(Text.of(TextColors.GOLD,
                                    "The next entity you right click will have the invulnerability value of: " + value));
                            return CommandResult.success();
                        })
                        .build(),
                "invulntest");
    }

    @Listener
    public void onEntityInteract(final InteractEntityEvent.Secondary event, @Root Player player) {
        if (this.invulnerable.containsKey(player.getUniqueId())) {
            final Entity target = event.getTargetEntity();
            if (target.supports(Keys.INVULNERABLE)) {
                final boolean value = this.invulnerable.remove(player.getUniqueId());
                target.offer(Keys.INVULNERABLE, value);
                player.sendMessage(Text.of(TextColors.GOLD,
                        "You have successfully set the invulnerability of the entity you interacted with to: " + value));
                player.sendMessage(Text.of(target.get(Keys.INVULNERABLE).orElse(false)));
            } else {
                player.sendMessage(Text.of(TextColors.RED, "This entity does not support invulnerability data."));
            }
        }
    }

}
