/*
 * This file is part of Sponge, licensed under the MIT License (MIT).
 *
 * Copyright (c) SpongePowered <https://www.spongepowered.org>
 * Copyright (c) contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.spongepowered.common.registry.builtin.vanilla;

import net.minecraft.block.Blocks;
import org.spongepowered.api.block.BlockType;
import org.spongepowered.common.registry.SpongeCatalogRegistry;

public final class BlockSupplier {

    private BlockSupplier() {
    }

    public static void registerSuppliers(final SpongeCatalogRegistry registry) {
        registry
            .registerSupplier(BlockType.class, "air", () -> (BlockType) Blocks.AIR)
            .registerSupplier(BlockType.class, "stone", () -> (BlockType) Blocks.STONE)
            .registerSupplier(BlockType.class, "granite", () -> (BlockType) Blocks.GRANITE)
            .registerSupplier(BlockType.class, "polished_granite", () -> (BlockType) Blocks.POLISHED_GRANITE)
            .registerSupplier(BlockType.class, "diorite", () -> (BlockType) Blocks.DIORITE)
            .registerSupplier(BlockType.class, "polished_diorite", () -> (BlockType) Blocks.POLISHED_DIORITE)
            .registerSupplier(BlockType.class, "andesite", () -> (BlockType) Blocks.ANDESITE)
            .registerSupplier(BlockType.class, "polished_andesite", () -> (BlockType) Blocks.POLISHED_ANDESITE)
            .registerSupplier(BlockType.class, "grass_block", () -> (BlockType) Blocks.GRASS_BLOCK)
            .registerSupplier(BlockType.class, "dirt", () -> (BlockType) Blocks.DIRT)
            .registerSupplier(BlockType.class, "coarse_dirt", () -> (BlockType) Blocks.COARSE_DIRT)
            .registerSupplier(BlockType.class, "podzol", () -> (BlockType) Blocks.PODZOL)
            .registerSupplier(BlockType.class, "cobblestone", () -> (BlockType) Blocks.COBBLESTONE)
            .registerSupplier(BlockType.class, "oak_planks", () -> (BlockType) Blocks.OAK_PLANKS)
            .registerSupplier(BlockType.class, "spruce_planks", () -> (BlockType) Blocks.SPRUCE_PLANKS)
            .registerSupplier(BlockType.class, "birch_planks", () -> (BlockType) Blocks.BIRCH_PLANKS)
            .registerSupplier(BlockType.class, "jungle_planks", () -> (BlockType) Blocks.JUNGLE_PLANKS)
            .registerSupplier(BlockType.class, "acacia_planks", () -> (BlockType) Blocks.ACACIA_PLANKS)
            .registerSupplier(BlockType.class, "dark_oak_planks", () -> (BlockType) Blocks.DARK_OAK_PLANKS)
            .registerSupplier(BlockType.class, "oak_sapling", () -> (BlockType) Blocks.OAK_SAPLING)
            .registerSupplier(BlockType.class, "spruce_sapling", () -> (BlockType) Blocks.SPRUCE_SAPLING)
            .registerSupplier(BlockType.class, "birch_sapling", () -> (BlockType) Blocks.BIRCH_SAPLING)
            .registerSupplier(BlockType.class, "jungle_sapling", () -> (BlockType) Blocks.JUNGLE_SAPLING)
            .registerSupplier(BlockType.class, "acacia_sapling", () -> (BlockType) Blocks.ACACIA_SAPLING)
            .registerSupplier(BlockType.class, "dark_oak_sapling", () -> (BlockType) Blocks.DARK_OAK_SAPLING)
            .registerSupplier(BlockType.class, "bedrock", () -> (BlockType) Blocks.BEDROCK)
            .registerSupplier(BlockType.class, "water", () -> (BlockType) Blocks.WATER)
            .registerSupplier(BlockType.class, "lava", () -> (BlockType) Blocks.LAVA)
            .registerSupplier(BlockType.class, "sand", () -> (BlockType) Blocks.SAND)
            .registerSupplier(BlockType.class, "red_sand", () -> (BlockType) Blocks.RED_SAND)
            .registerSupplier(BlockType.class, "gravel", () -> (BlockType) Blocks.GRAVEL)
            .registerSupplier(BlockType.class, "gold_ore", () -> (BlockType) Blocks.GOLD_ORE)
            .registerSupplier(BlockType.class, "iron_ore", () -> (BlockType) Blocks.IRON_ORE)
            .registerSupplier(BlockType.class, "coal_ore", () -> (BlockType) Blocks.COAL_ORE)
            .registerSupplier(BlockType.class, "oak_log", () -> (BlockType) Blocks.OAK_LOG)
            .registerSupplier(BlockType.class, "spruce_log", () -> (BlockType) Blocks.SPRUCE_LOG)
            .registerSupplier(BlockType.class, "birch_log", () -> (BlockType) Blocks.BIRCH_LOG)
            .registerSupplier(BlockType.class, "jungle_log", () -> (BlockType) Blocks.JUNGLE_LOG)
            .registerSupplier(BlockType.class, "acacia_log", () -> (BlockType) Blocks.ACACIA_LOG)
            .registerSupplier(BlockType.class, "dark_oak_log", () -> (BlockType) Blocks.DARK_OAK_LOG)
            .registerSupplier(BlockType.class, "stripped_spruce_log", () -> (BlockType) Blocks.STRIPPED_SPRUCE_LOG)
            .registerSupplier(BlockType.class, "stripped_birch_log", () -> (BlockType) Blocks.STRIPPED_BIRCH_LOG)
            .registerSupplier(BlockType.class, "stripped_jungle_log", () -> (BlockType) Blocks.STRIPPED_JUNGLE_LOG)
            .registerSupplier(BlockType.class, "stripped_acacia_log", () -> (BlockType) Blocks.STRIPPED_ACACIA_LOG)
            .registerSupplier(BlockType.class, "stripped_dark_oak_log", () -> (BlockType) Blocks.STRIPPED_DARK_OAK_LOG)
            .registerSupplier(BlockType.class, "stripped_oak_log", () -> (BlockType) Blocks.STRIPPED_OAK_LOG)
            .registerSupplier(BlockType.class, "oak_wood", () -> (BlockType) Blocks.OAK_WOOD)
            .registerSupplier(BlockType.class, "spruce_wood", () -> (BlockType) Blocks.SPRUCE_WOOD)
            .registerSupplier(BlockType.class, "birch_wood", () -> (BlockType) Blocks.BIRCH_WOOD)
            .registerSupplier(BlockType.class, "jungle_wood", () -> (BlockType) Blocks.JUNGLE_WOOD)
            .registerSupplier(BlockType.class, "acacia_wood", () -> (BlockType) Blocks.ACACIA_WOOD)
            .registerSupplier(BlockType.class, "dark_oak_wood", () -> (BlockType) Blocks.DARK_OAK_WOOD)
            .registerSupplier(BlockType.class, "stripped_oak_wood", () -> (BlockType) Blocks.STRIPPED_OAK_WOOD)
            .registerSupplier(BlockType.class, "stripped_spruce_wood", () -> (BlockType) Blocks.STRIPPED_SPRUCE_WOOD)
            .registerSupplier(BlockType.class, "stripped_birch_wood", () -> (BlockType) Blocks.STRIPPED_BIRCH_WOOD)
            .registerSupplier(BlockType.class, "stripped_jungle_wood", () -> (BlockType) Blocks.STRIPPED_JUNGLE_WOOD)
            .registerSupplier(BlockType.class, "stripped_acacia_wood", () -> (BlockType) Blocks.STRIPPED_ACACIA_WOOD)
            .registerSupplier(BlockType.class, "stripped_dark_oak_wood", () -> (BlockType) Blocks.STRIPPED_DARK_OAK_WOOD)
            .registerSupplier(BlockType.class, "oak_leaves", () -> (BlockType) Blocks.OAK_LEAVES)
            .registerSupplier(BlockType.class, "spruce_leaves", () -> (BlockType) Blocks.SPRUCE_LEAVES)
            .registerSupplier(BlockType.class, "birch_leaves", () -> (BlockType) Blocks.BIRCH_LEAVES)
            .registerSupplier(BlockType.class, "jungle_leaves", () -> (BlockType) Blocks.JUNGLE_LEAVES)
            .registerSupplier(BlockType.class, "acacia_leaves", () -> (BlockType) Blocks.ACACIA_LEAVES)
            .registerSupplier(BlockType.class, "dark_oak_leaves", () -> (BlockType) Blocks.DARK_OAK_LEAVES)
            .registerSupplier(BlockType.class, "sponge", () -> (BlockType) Blocks.SPONGE)
            .registerSupplier(BlockType.class, "wet_sponge", () -> (BlockType) Blocks.WET_SPONGE)
            .registerSupplier(BlockType.class, "glass", () -> (BlockType) Blocks.GLASS)
            .registerSupplier(BlockType.class, "lapis_ore", () -> (BlockType) Blocks.LAPIS_ORE)
            .registerSupplier(BlockType.class, "lapis_block", () -> (BlockType) Blocks.LAPIS_BLOCK)
            .registerSupplier(BlockType.class, "dispenser", () -> (BlockType) Blocks.DISPENSER)
            .registerSupplier(BlockType.class, "sandstone", () -> (BlockType) Blocks.SANDSTONE)
            .registerSupplier(BlockType.class, "chiseled_sandstone", () -> (BlockType) Blocks.CHISELED_SANDSTONE)
            .registerSupplier(BlockType.class, "cut_sandstone", () -> (BlockType) Blocks.CUT_SANDSTONE)
            .registerSupplier(BlockType.class, "note_block", () -> (BlockType) Blocks.NOTE_BLOCK)
            .registerSupplier(BlockType.class, "white_bed", () -> (BlockType) Blocks.WHITE_BED)
            .registerSupplier(BlockType.class, "orange_bed", () -> (BlockType) Blocks.ORANGE_BED)
            .registerSupplier(BlockType.class, "magenta_bed", () -> (BlockType) Blocks.MAGENTA_BED)
            .registerSupplier(BlockType.class, "light_blue_bed", () -> (BlockType) Blocks.LIGHT_BLUE_BED)
            .registerSupplier(BlockType.class, "yellow_bed", () -> (BlockType) Blocks.YELLOW_BED)
            .registerSupplier(BlockType.class, "lime_bed", () -> (BlockType) Blocks.LIME_BED)
            .registerSupplier(BlockType.class, "pink_bed", () -> (BlockType) Blocks.PINK_BED)
            .registerSupplier(BlockType.class, "gray_bed", () -> (BlockType) Blocks.GRAY_BED)
            .registerSupplier(BlockType.class, "light_gray_bed", () -> (BlockType) Blocks.LIGHT_GRAY_BED)
            .registerSupplier(BlockType.class, "cyan_bed", () -> (BlockType) Blocks.CYAN_BED)
            .registerSupplier(BlockType.class, "purple_bed", () -> (BlockType) Blocks.PURPLE_BED)
            .registerSupplier(BlockType.class, "blue_bed", () -> (BlockType) Blocks.BLUE_BED)
            .registerSupplier(BlockType.class, "brown_bed", () -> (BlockType) Blocks.BROWN_BED)
            .registerSupplier(BlockType.class, "green_bed", () -> (BlockType) Blocks.GREEN_BED)
            .registerSupplier(BlockType.class, "red_bed", () -> (BlockType) Blocks.RED_BED)
            .registerSupplier(BlockType.class, "black_bed", () -> (BlockType) Blocks.BLACK_BED)
            .registerSupplier(BlockType.class, "powered_rail", () -> (BlockType) Blocks.POWERED_RAIL)
            .registerSupplier(BlockType.class, "detector_rail", () -> (BlockType) Blocks.DETECTOR_RAIL)
            .registerSupplier(BlockType.class, "sticky_piston", () -> (BlockType) Blocks.STICKY_PISTON)
            .registerSupplier(BlockType.class, "cobweb", () -> (BlockType) Blocks.COBWEB)
            .registerSupplier(BlockType.class, "grass", () -> (BlockType) Blocks.GRASS)
            .registerSupplier(BlockType.class, "fern", () -> (BlockType) Blocks.FERN)
            .registerSupplier(BlockType.class, "dead_bush", () -> (BlockType) Blocks.DEAD_BUSH)
            .registerSupplier(BlockType.class, "seagrass", () -> (BlockType) Blocks.SEAGRASS)
            .registerSupplier(BlockType.class, "tall_seagrass", () -> (BlockType) Blocks.TALL_SEAGRASS)
            .registerSupplier(BlockType.class, "piston", () -> (BlockType) Blocks.PISTON)
            .registerSupplier(BlockType.class, "piston_head", () -> (BlockType) Blocks.PISTON_HEAD)
            .registerSupplier(BlockType.class, "white_wool", () -> (BlockType) Blocks.WHITE_WOOL)
            .registerSupplier(BlockType.class, "orange_wool", () -> (BlockType) Blocks.ORANGE_WOOL)
            .registerSupplier(BlockType.class, "magenta_wool", () -> (BlockType) Blocks.MAGENTA_WOOL)
            .registerSupplier(BlockType.class, "light_blue_wool", () -> (BlockType) Blocks.LIGHT_BLUE_WOOL)
            .registerSupplier(BlockType.class, "yellow_wool", () -> (BlockType) Blocks.YELLOW_WOOL)
            .registerSupplier(BlockType.class, "lime_wool", () -> (BlockType) Blocks.LIME_WOOL)
            .registerSupplier(BlockType.class, "pink_wool", () -> (BlockType) Blocks.PINK_WOOL)
            .registerSupplier(BlockType.class, "gray_wool", () -> (BlockType) Blocks.GRAY_WOOL)
            .registerSupplier(BlockType.class, "light_gray_wool", () -> (BlockType) Blocks.LIGHT_GRAY_WOOL)
            .registerSupplier(BlockType.class, "cyan_wool", () -> (BlockType) Blocks.CYAN_WOOL)
            .registerSupplier(BlockType.class, "purple_wool", () -> (BlockType) Blocks.PURPLE_WOOL)
            .registerSupplier(BlockType.class, "blue_wool", () -> (BlockType) Blocks.BLUE_WOOL)
            .registerSupplier(BlockType.class, "brown_wool", () -> (BlockType) Blocks.BROWN_WOOL)
            .registerSupplier(BlockType.class, "green_wool", () -> (BlockType) Blocks.GREEN_WOOL)
            .registerSupplier(BlockType.class, "red_wool", () -> (BlockType) Blocks.RED_WOOL)
            .registerSupplier(BlockType.class, "black_wool", () -> (BlockType) Blocks.BLACK_WOOL)
            .registerSupplier(BlockType.class, "moving_piston", () -> (BlockType) Blocks.MOVING_PISTON)
            .registerSupplier(BlockType.class, "dandelion", () -> (BlockType) Blocks.DANDELION)
            .registerSupplier(BlockType.class, "poppy", () -> (BlockType) Blocks.POPPY)
            .registerSupplier(BlockType.class, "blue_orchid", () -> (BlockType) Blocks.BLUE_ORCHID)
            .registerSupplier(BlockType.class, "allium", () -> (BlockType) Blocks.ALLIUM)
            .registerSupplier(BlockType.class, "azure_bluet", () -> (BlockType) Blocks.AZURE_BLUET)
            .registerSupplier(BlockType.class, "red_tulip", () -> (BlockType) Blocks.RED_TULIP)
            .registerSupplier(BlockType.class, "orange_tulip", () -> (BlockType) Blocks.ORANGE_TULIP)
            .registerSupplier(BlockType.class, "white_tulip", () -> (BlockType) Blocks.WHITE_TULIP)
            .registerSupplier(BlockType.class, "pink_tulip", () -> (BlockType) Blocks.PINK_TULIP)
            .registerSupplier(BlockType.class, "oxeye_daisy", () -> (BlockType) Blocks.OXEYE_DAISY)
            .registerSupplier(BlockType.class, "cornflower", () -> (BlockType) Blocks.CORNFLOWER)
            .registerSupplier(BlockType.class, "wither_rose", () -> (BlockType) Blocks.WITHER_ROSE)
            .registerSupplier(BlockType.class, "lily_of_the_valley", () -> (BlockType) Blocks.LILY_OF_THE_VALLEY)
            .registerSupplier(BlockType.class, "brown_mushroom", () -> (BlockType) Blocks.BROWN_MUSHROOM)
            .registerSupplier(BlockType.class, "red_mushroom", () -> (BlockType) Blocks.RED_MUSHROOM)
            .registerSupplier(BlockType.class, "gold_block", () -> (BlockType) Blocks.GOLD_BLOCK)
            .registerSupplier(BlockType.class, "iron_block", () -> (BlockType) Blocks.IRON_BLOCK)
            .registerSupplier(BlockType.class, "bricks", () -> (BlockType) Blocks.BRICKS)
            .registerSupplier(BlockType.class, "tnt", () -> (BlockType) Blocks.TNT)
            .registerSupplier(BlockType.class, "bookshelf", () -> (BlockType) Blocks.BOOKSHELF)
            .registerSupplier(BlockType.class, "mossy_cobblestone", () -> (BlockType) Blocks.MOSSY_COBBLESTONE)
            .registerSupplier(BlockType.class, "obsidian", () -> (BlockType) Blocks.OBSIDIAN)
            .registerSupplier(BlockType.class, "torch", () -> (BlockType) Blocks.TORCH)
            .registerSupplier(BlockType.class, "wall_torch", () -> (BlockType) Blocks.WALL_TORCH)
            .registerSupplier(BlockType.class, "fire", () -> (BlockType) Blocks.FIRE)
            .registerSupplier(BlockType.class, "spawner", () -> (BlockType) Blocks.SPAWNER)
            .registerSupplier(BlockType.class, "oak_stairs", () -> (BlockType) Blocks.OAK_STAIRS)
            .registerSupplier(BlockType.class, "chest", () -> (BlockType) Blocks.CHEST)
            .registerSupplier(BlockType.class, "redstone_wire", () -> (BlockType) Blocks.REDSTONE_WIRE)
            .registerSupplier(BlockType.class, "diamond_ore", () -> (BlockType) Blocks.DIAMOND_ORE)
            .registerSupplier(BlockType.class, "diamond_block", () -> (BlockType) Blocks.DIAMOND_BLOCK)
            .registerSupplier(BlockType.class, "crafting_table", () -> (BlockType) Blocks.CRAFTING_TABLE)
            .registerSupplier(BlockType.class, "wheat", () -> (BlockType) Blocks.WHEAT)
            .registerSupplier(BlockType.class, "farmland", () -> (BlockType) Blocks.FARMLAND)
            .registerSupplier(BlockType.class, "furnace", () -> (BlockType) Blocks.FURNACE)
            .registerSupplier(BlockType.class, "oak_sign", () -> (BlockType) Blocks.OAK_SIGN)
            .registerSupplier(BlockType.class, "spruce_sign", () -> (BlockType) Blocks.SPRUCE_SIGN)
            .registerSupplier(BlockType.class, "birch_sign", () -> (BlockType) Blocks.BIRCH_SIGN)
            .registerSupplier(BlockType.class, "acacia_sign", () -> (BlockType) Blocks.ACACIA_SIGN)
            .registerSupplier(BlockType.class, "jungle_sign", () -> (BlockType) Blocks.JUNGLE_SIGN)
            .registerSupplier(BlockType.class, "dark_oak_sign", () -> (BlockType) Blocks.DARK_OAK_SIGN)
            .registerSupplier(BlockType.class, "oak_door", () -> (BlockType) Blocks.OAK_DOOR)
            .registerSupplier(BlockType.class, "ladder", () -> (BlockType) Blocks.LADDER)
            .registerSupplier(BlockType.class, "rail", () -> (BlockType) Blocks.RAIL)
            .registerSupplier(BlockType.class, "cobblestone_stairs", () -> (BlockType) Blocks.COBBLESTONE_STAIRS)
            .registerSupplier(BlockType.class, "oak_wall_sign", () -> (BlockType) Blocks.OAK_WALL_SIGN)
            .registerSupplier(BlockType.class, "spruce_wall_sign", () -> (BlockType) Blocks.SPRUCE_WALL_SIGN)
            .registerSupplier(BlockType.class, "birch_wall_sign", () -> (BlockType) Blocks.BIRCH_WALL_SIGN)
            .registerSupplier(BlockType.class, "acacia_wall_sign", () -> (BlockType) Blocks.ACACIA_WALL_SIGN)
            .registerSupplier(BlockType.class, "jungle_wall_sign", () -> (BlockType) Blocks.JUNGLE_WALL_SIGN)
            .registerSupplier(BlockType.class, "dark_oak_wall_sign", () -> (BlockType) Blocks.DARK_OAK_WALL_SIGN)
            .registerSupplier(BlockType.class, "lever", () -> (BlockType) Blocks.LEVER)
            .registerSupplier(BlockType.class, "stone_pressure_plate", () -> (BlockType) Blocks.STONE_PRESSURE_PLATE)
            .registerSupplier(BlockType.class, "iron_door", () -> (BlockType) Blocks.IRON_DOOR)
            .registerSupplier(BlockType.class, "oak_pressure_plate", () -> (BlockType) Blocks.OAK_PRESSURE_PLATE)
            .registerSupplier(BlockType.class, "spruce_pressure_plate", () -> (BlockType) Blocks.SPRUCE_PRESSURE_PLATE)
            .registerSupplier(BlockType.class, "birch_pressure_plate", () -> (BlockType) Blocks.BIRCH_PRESSURE_PLATE)
            .registerSupplier(BlockType.class, "jungle_pressure_plate", () -> (BlockType) Blocks.JUNGLE_PRESSURE_PLATE)
            .registerSupplier(BlockType.class, "acacia_pressure_plate", () -> (BlockType) Blocks.ACACIA_PRESSURE_PLATE)
            .registerSupplier(BlockType.class, "dark_oak_pressure_plate", () -> (BlockType) Blocks.DARK_OAK_PRESSURE_PLATE)
            .registerSupplier(BlockType.class, "redstone_ore", () -> (BlockType) Blocks.REDSTONE_ORE)
            .registerSupplier(BlockType.class, "redstone_torch", () -> (BlockType) Blocks.REDSTONE_TORCH)
            .registerSupplier(BlockType.class, "redstone_wall_torch", () -> (BlockType) Blocks.REDSTONE_WALL_TORCH)
            .registerSupplier(BlockType.class, "stone_button", () -> (BlockType) Blocks.STONE_BUTTON)
            .registerSupplier(BlockType.class, "snow", () -> (BlockType) Blocks.SNOW)
            .registerSupplier(BlockType.class, "ice", () -> (BlockType) Blocks.ICE)
            .registerSupplier(BlockType.class, "snow_block", () -> (BlockType) Blocks.SNOW_BLOCK)
            .registerSupplier(BlockType.class, "cactus", () -> (BlockType) Blocks.CACTUS)
            .registerSupplier(BlockType.class, "clay", () -> (BlockType) Blocks.CLAY)
            .registerSupplier(BlockType.class, "sugar_cane", () -> (BlockType) Blocks.SUGAR_CANE)
            .registerSupplier(BlockType.class, "jukebox", () -> (BlockType) Blocks.JUKEBOX)
            .registerSupplier(BlockType.class, "oak_fence", () -> (BlockType) Blocks.OAK_FENCE)
            .registerSupplier(BlockType.class, "pumpkin", () -> (BlockType) Blocks.PUMPKIN)
            .registerSupplier(BlockType.class, "netherrack", () -> (BlockType) Blocks.NETHERRACK)
            .registerSupplier(BlockType.class, "soul_sand", () -> (BlockType) Blocks.SOUL_SAND)
            .registerSupplier(BlockType.class, "glowstone", () -> (BlockType) Blocks.GLOWSTONE)
            .registerSupplier(BlockType.class, "nether_portal", () -> (BlockType) Blocks.NETHER_PORTAL)
            .registerSupplier(BlockType.class, "carved_pumpkin", () -> (BlockType) Blocks.CARVED_PUMPKIN)
            .registerSupplier(BlockType.class, "jack_o_lantern", () -> (BlockType) Blocks.JACK_O_LANTERN)
            .registerSupplier(BlockType.class, "cake", () -> (BlockType) Blocks.CAKE)
            .registerSupplier(BlockType.class, "repeater", () -> (BlockType) Blocks.REPEATER)
            .registerSupplier(BlockType.class, "white_stained_glass", () -> (BlockType) Blocks.WHITE_STAINED_GLASS)
            .registerSupplier(BlockType.class, "orange_stained_glass", () -> (BlockType) Blocks.ORANGE_STAINED_GLASS)
            .registerSupplier(BlockType.class, "magenta_stained_glass", () -> (BlockType) Blocks.MAGENTA_STAINED_GLASS)
            .registerSupplier(BlockType.class, "light_blue_stained_glass", () -> (BlockType) Blocks.LIGHT_BLUE_STAINED_GLASS)
            .registerSupplier(BlockType.class, "yellow_stained_glass", () -> (BlockType) Blocks.YELLOW_STAINED_GLASS)
            .registerSupplier(BlockType.class, "lime_stained_glass", () -> (BlockType) Blocks.LIME_STAINED_GLASS)
            .registerSupplier(BlockType.class, "pink_stained_glass", () -> (BlockType) Blocks.PINK_STAINED_GLASS)
            .registerSupplier(BlockType.class, "gray_stained_glass", () -> (BlockType) Blocks.GRAY_STAINED_GLASS)
            .registerSupplier(BlockType.class, "light_gray_stained_glass", () -> (BlockType) Blocks.LIGHT_GRAY_STAINED_GLASS)
            .registerSupplier(BlockType.class, "cyan_stained_glass", () -> (BlockType) Blocks.CYAN_STAINED_GLASS)
            .registerSupplier(BlockType.class, "purple_stained_glass", () -> (BlockType) Blocks.PURPLE_STAINED_GLASS)
            .registerSupplier(BlockType.class, "blue_stained_glass", () -> (BlockType) Blocks.BLUE_STAINED_GLASS)
            .registerSupplier(BlockType.class, "brown_stained_glass", () -> (BlockType) Blocks.BROWN_STAINED_GLASS)
            .registerSupplier(BlockType.class, "green_stained_glass", () -> (BlockType) Blocks.GREEN_STAINED_GLASS)
            .registerSupplier(BlockType.class, "red_stained_glass", () -> (BlockType) Blocks.RED_STAINED_GLASS)
            .registerSupplier(BlockType.class, "black_stained_glass", () -> (BlockType) Blocks.BLACK_STAINED_GLASS)
            .registerSupplier(BlockType.class, "oak_trapdoor", () -> (BlockType) Blocks.OAK_TRAPDOOR)
            .registerSupplier(BlockType.class, "spruce_trapdoor", () -> (BlockType) Blocks.SPRUCE_TRAPDOOR)
            .registerSupplier(BlockType.class, "birch_trapdoor", () -> (BlockType) Blocks.BIRCH_TRAPDOOR)
            .registerSupplier(BlockType.class, "jungle_trapdoor", () -> (BlockType) Blocks.JUNGLE_TRAPDOOR)
            .registerSupplier(BlockType.class, "acacia_trapdoor", () -> (BlockType) Blocks.ACACIA_TRAPDOOR)
            .registerSupplier(BlockType.class, "dark_oak_trapdoor", () -> (BlockType) Blocks.DARK_OAK_TRAPDOOR)
            .registerSupplier(BlockType.class, "stone_bricks", () -> (BlockType) Blocks.STONE_BRICKS)
            .registerSupplier(BlockType.class, "mossy_stone_bricks", () -> (BlockType) Blocks.MOSSY_STONE_BRICKS)
            .registerSupplier(BlockType.class, "cracked_stone_bricks", () -> (BlockType) Blocks.CRACKED_STONE_BRICKS)
            .registerSupplier(BlockType.class, "chiseled_stone_bricks", () -> (BlockType) Blocks.CHISELED_STONE_BRICKS)
            .registerSupplier(BlockType.class, "infested_stone", () -> (BlockType) Blocks.INFESTED_STONE)
            .registerSupplier(BlockType.class, "infested_cobblestone", () -> (BlockType) Blocks.INFESTED_COBBLESTONE)
            .registerSupplier(BlockType.class, "infested_stone_bricks", () -> (BlockType) Blocks.INFESTED_STONE_BRICKS)
            .registerSupplier(BlockType.class, "infested_mossy_stone_bricks", () -> (BlockType) Blocks.INFESTED_MOSSY_STONE_BRICKS)
            .registerSupplier(BlockType.class, "infested_cracked_stone_bricks", () -> (BlockType) Blocks.INFESTED_CRACKED_STONE_BRICKS)
            .registerSupplier(BlockType.class, "infested_chiseled_stone_bricks", () -> (BlockType) Blocks.INFESTED_CHISELED_STONE_BRICKS)
            .registerSupplier(BlockType.class, "brown_mushroom_block", () -> (BlockType) Blocks.BROWN_MUSHROOM_BLOCK)
            .registerSupplier(BlockType.class, "red_mushroom_block", () -> (BlockType) Blocks.RED_MUSHROOM_BLOCK)
            .registerSupplier(BlockType.class, "mushroom_stem", () -> (BlockType) Blocks.MUSHROOM_STEM)
            .registerSupplier(BlockType.class, "iron_bars", () -> (BlockType) Blocks.IRON_BARS)
            .registerSupplier(BlockType.class, "glass_pane", () -> (BlockType) Blocks.GLASS_PANE)
            .registerSupplier(BlockType.class, "melon", () -> (BlockType) Blocks.MELON)
            .registerSupplier(BlockType.class, "attached_pumpkin_stem", () -> (BlockType) Blocks.ATTACHED_PUMPKIN_STEM)
            .registerSupplier(BlockType.class, "attached_melon_stem", () -> (BlockType) Blocks.ATTACHED_MELON_STEM)
            .registerSupplier(BlockType.class, "pumpkin_stem", () -> (BlockType) Blocks.PUMPKIN_STEM)
            .registerSupplier(BlockType.class, "melon_stem", () -> (BlockType) Blocks.MELON_STEM)
            .registerSupplier(BlockType.class, "vine", () -> (BlockType) Blocks.VINE)
            .registerSupplier(BlockType.class, "oak_fence_gate", () -> (BlockType) Blocks.OAK_FENCE_GATE)
            .registerSupplier(BlockType.class, "brick_stairs", () -> (BlockType) Blocks.BRICK_STAIRS)
            .registerSupplier(BlockType.class, "stone_brick_stairs", () -> (BlockType) Blocks.STONE_BRICK_STAIRS)
            .registerSupplier(BlockType.class, "mycelium", () -> (BlockType) Blocks.MYCELIUM)
            .registerSupplier(BlockType.class, "lily_pad", () -> (BlockType) Blocks.LILY_PAD)
            .registerSupplier(BlockType.class, "nether_bricks", () -> (BlockType) Blocks.NETHER_BRICKS)
            .registerSupplier(BlockType.class, "nether_brick_fence", () -> (BlockType) Blocks.NETHER_BRICK_FENCE)
            .registerSupplier(BlockType.class, "nether_brick_stairs", () -> (BlockType) Blocks.NETHER_BRICK_STAIRS)
            .registerSupplier(BlockType.class, "nether_wart", () -> (BlockType) Blocks.NETHER_WART)
            .registerSupplier(BlockType.class, "enchanting_table", () -> (BlockType) Blocks.ENCHANTING_TABLE)
            .registerSupplier(BlockType.class, "brewing_stand", () -> (BlockType) Blocks.BREWING_STAND)
            .registerSupplier(BlockType.class, "cauldron", () -> (BlockType) Blocks.CAULDRON)
            .registerSupplier(BlockType.class, "end_portal", () -> (BlockType) Blocks.END_PORTAL)
            .registerSupplier(BlockType.class, "end_portal_frame", () -> (BlockType) Blocks.END_PORTAL_FRAME)
            .registerSupplier(BlockType.class, "end_stone", () -> (BlockType) Blocks.END_STONE)
            .registerSupplier(BlockType.class, "dragon_egg", () -> (BlockType) Blocks.DRAGON_EGG)
            .registerSupplier(BlockType.class, "redstone_lamp", () -> (BlockType) Blocks.REDSTONE_LAMP)
            .registerSupplier(BlockType.class, "cocoa", () -> (BlockType) Blocks.COCOA)
            .registerSupplier(BlockType.class, "sandstone_stairs", () -> (BlockType) Blocks.SANDSTONE_STAIRS)
            .registerSupplier(BlockType.class, "emerald_ore", () -> (BlockType) Blocks.EMERALD_ORE)
            .registerSupplier(BlockType.class, "ender_chest", () -> (BlockType) Blocks.ENDER_CHEST)
            .registerSupplier(BlockType.class, "tripwire_hook", () -> (BlockType) Blocks.TRIPWIRE_HOOK)
            .registerSupplier(BlockType.class, "tripwire", () -> (BlockType) Blocks.TRIPWIRE)
            .registerSupplier(BlockType.class, "emerald_block", () -> (BlockType) Blocks.EMERALD_BLOCK)
            .registerSupplier(BlockType.class, "spruce_stairs", () -> (BlockType) Blocks.SPRUCE_STAIRS)
            .registerSupplier(BlockType.class, "birch_stairs", () -> (BlockType) Blocks.BIRCH_STAIRS)
            .registerSupplier(BlockType.class, "jungle_stairs", () -> (BlockType) Blocks.JUNGLE_STAIRS)
            .registerSupplier(BlockType.class, "command_block", () -> (BlockType) Blocks.COMMAND_BLOCK)
            .registerSupplier(BlockType.class, "beacon", () -> (BlockType) Blocks.BEACON)
            .registerSupplier(BlockType.class, "cobblestone_wall", () -> (BlockType) Blocks.COBBLESTONE_WALL)
            .registerSupplier(BlockType.class, "mossy_cobblestone_wall", () -> (BlockType) Blocks.MOSSY_COBBLESTONE_WALL)
            .registerSupplier(BlockType.class, "flower_pot", () -> (BlockType) Blocks.FLOWER_POT)
            .registerSupplier(BlockType.class, "potted_oak_sapling", () -> (BlockType) Blocks.POTTED_OAK_SAPLING)
            .registerSupplier(BlockType.class, "potted_spruce_sapling", () -> (BlockType) Blocks.POTTED_SPRUCE_SAPLING)
            .registerSupplier(BlockType.class, "potted_birch_sapling", () -> (BlockType) Blocks.POTTED_BIRCH_SAPLING)
            .registerSupplier(BlockType.class, "potted_jungle_sapling", () -> (BlockType) Blocks.POTTED_JUNGLE_SAPLING)
            .registerSupplier(BlockType.class, "potted_acacia_sapling", () -> (BlockType) Blocks.POTTED_ACACIA_SAPLING)
            .registerSupplier(BlockType.class, "potted_dark_oak_sapling", () -> (BlockType) Blocks.POTTED_DARK_OAK_SAPLING)
            .registerSupplier(BlockType.class, "potted_fern", () -> (BlockType) Blocks.POTTED_FERN)
            .registerSupplier(BlockType.class, "potted_dandelion", () -> (BlockType) Blocks.POTTED_DANDELION)
            .registerSupplier(BlockType.class, "potted_poppy", () -> (BlockType) Blocks.POTTED_POPPY)
            .registerSupplier(BlockType.class, "potted_blue_orchid", () -> (BlockType) Blocks.POTTED_BLUE_ORCHID)
            .registerSupplier(BlockType.class, "potted_allium", () -> (BlockType) Blocks.POTTED_ALLIUM)
            .registerSupplier(BlockType.class, "potted_azure_bluet", () -> (BlockType) Blocks.POTTED_AZURE_BLUET)
            .registerSupplier(BlockType.class, "potted_red_tulip", () -> (BlockType) Blocks.POTTED_RED_TULIP)
            .registerSupplier(BlockType.class, "potted_orange_tulip", () -> (BlockType) Blocks.POTTED_ORANGE_TULIP)
            .registerSupplier(BlockType.class, "potted_white_tulip", () -> (BlockType) Blocks.POTTED_WHITE_TULIP)
            .registerSupplier(BlockType.class, "potted_pink_tulip", () -> (BlockType) Blocks.POTTED_PINK_TULIP)
            .registerSupplier(BlockType.class, "potted_oxeye_daisy", () -> (BlockType) Blocks.POTTED_OXEYE_DAISY)
            .registerSupplier(BlockType.class, "potted_cornflower", () -> (BlockType) Blocks.POTTED_CORNFLOWER)
            .registerSupplier(BlockType.class, "potted_lily_of_the_valley", () -> (BlockType) Blocks.POTTED_LILY_OF_THE_VALLEY)
            .registerSupplier(BlockType.class, "potted_wither_rose", () -> (BlockType) Blocks.POTTED_WITHER_ROSE)
            .registerSupplier(BlockType.class, "potted_red_mushroom", () -> (BlockType) Blocks.POTTED_RED_MUSHROOM)
            .registerSupplier(BlockType.class, "potted_brown_mushroom", () -> (BlockType) Blocks.POTTED_BROWN_MUSHROOM)
            .registerSupplier(BlockType.class, "potted_dead_bush", () -> (BlockType) Blocks.POTTED_DEAD_BUSH)
            .registerSupplier(BlockType.class, "potted_cactus", () -> (BlockType) Blocks.POTTED_CACTUS)
            .registerSupplier(BlockType.class, "carrots", () -> (BlockType) Blocks.CARROTS)
            .registerSupplier(BlockType.class, "potatoes", () -> (BlockType) Blocks.POTATOES)
            .registerSupplier(BlockType.class, "oak_button", () -> (BlockType) Blocks.OAK_BUTTON)
            .registerSupplier(BlockType.class, "spruce_button", () -> (BlockType) Blocks.SPRUCE_BUTTON)
            .registerSupplier(BlockType.class, "birch_button", () -> (BlockType) Blocks.BIRCH_BUTTON)
            .registerSupplier(BlockType.class, "jungle_button", () -> (BlockType) Blocks.JUNGLE_BUTTON)
            .registerSupplier(BlockType.class, "acacia_button", () -> (BlockType) Blocks.ACACIA_BUTTON)
            .registerSupplier(BlockType.class, "dark_oak_button", () -> (BlockType) Blocks.DARK_OAK_BUTTON)
            .registerSupplier(BlockType.class, "skeleton_skull", () -> (BlockType) Blocks.SKELETON_SKULL)
            .registerSupplier(BlockType.class, "skeleton_wall_skull", () -> (BlockType) Blocks.SKELETON_WALL_SKULL)
            .registerSupplier(BlockType.class, "wither_skeleton_skull", () -> (BlockType) Blocks.WITHER_SKELETON_SKULL)
            .registerSupplier(BlockType.class, "wither_skeleton_wall_skull", () -> (BlockType) Blocks.WITHER_SKELETON_WALL_SKULL)
            .registerSupplier(BlockType.class, "zombie_head", () -> (BlockType) Blocks.ZOMBIE_HEAD)
            .registerSupplier(BlockType.class, "zombie_wall_head", () -> (BlockType) Blocks.ZOMBIE_WALL_HEAD)
            .registerSupplier(BlockType.class, "player_head", () -> (BlockType) Blocks.PLAYER_HEAD)
            .registerSupplier(BlockType.class, "player_wall_head", () -> (BlockType) Blocks.PLAYER_WALL_HEAD)
            .registerSupplier(BlockType.class, "creeper_head", () -> (BlockType) Blocks.CREEPER_HEAD)
            .registerSupplier(BlockType.class, "creeper_wall_head", () -> (BlockType) Blocks.CREEPER_WALL_HEAD)
            .registerSupplier(BlockType.class, "dragon_head", () -> (BlockType) Blocks.DRAGON_HEAD)
            .registerSupplier(BlockType.class, "dragon_wall_head", () -> (BlockType) Blocks.DRAGON_WALL_HEAD)
            .registerSupplier(BlockType.class, "anvil", () -> (BlockType) Blocks.ANVIL)
            .registerSupplier(BlockType.class, "chipped_anvil", () -> (BlockType) Blocks.CHIPPED_ANVIL)
            .registerSupplier(BlockType.class, "damaged_anvil", () -> (BlockType) Blocks.DAMAGED_ANVIL)
            .registerSupplier(BlockType.class, "trapped_chest", () -> (BlockType) Blocks.TRAPPED_CHEST)
            .registerSupplier(BlockType.class, "light_weighted_pressure_plate", () -> (BlockType) Blocks.LIGHT_WEIGHTED_PRESSURE_PLATE)
            .registerSupplier(BlockType.class, "heavy_weighted_pressure_plate", () -> (BlockType) Blocks.HEAVY_WEIGHTED_PRESSURE_PLATE)
            .registerSupplier(BlockType.class, "comparator", () -> (BlockType) Blocks.COMPARATOR)
            .registerSupplier(BlockType.class, "daylight_detector", () -> (BlockType) Blocks.DAYLIGHT_DETECTOR)
            .registerSupplier(BlockType.class, "redstone_block", () -> (BlockType) Blocks.REDSTONE_BLOCK)
            .registerSupplier(BlockType.class, "nether_quartz_ore", () -> (BlockType) Blocks.NETHER_QUARTZ_ORE)
            .registerSupplier(BlockType.class, "hopper", () -> (BlockType) Blocks.HOPPER)
            .registerSupplier(BlockType.class, "quartz_block", () -> (BlockType) Blocks.QUARTZ_BLOCK)
            .registerSupplier(BlockType.class, "chiseled_quartz_block", () -> (BlockType) Blocks.CHISELED_QUARTZ_BLOCK)
            .registerSupplier(BlockType.class, "quartz_pillar", () -> (BlockType) Blocks.QUARTZ_PILLAR)
            .registerSupplier(BlockType.class, "quartz_stairs", () -> (BlockType) Blocks.QUARTZ_STAIRS)
            .registerSupplier(BlockType.class, "activator_rail", () -> (BlockType) Blocks.ACTIVATOR_RAIL)
            .registerSupplier(BlockType.class, "dropper", () -> (BlockType) Blocks.DROPPER)
            .registerSupplier(BlockType.class, "white_terracotta", () -> (BlockType) Blocks.WHITE_TERRACOTTA)
            .registerSupplier(BlockType.class, "orange_terracotta", () -> (BlockType) Blocks.ORANGE_TERRACOTTA)
            .registerSupplier(BlockType.class, "magenta_terracotta", () -> (BlockType) Blocks.MAGENTA_TERRACOTTA)
            .registerSupplier(BlockType.class, "light_blue_terracotta", () -> (BlockType) Blocks.LIGHT_BLUE_TERRACOTTA)
            .registerSupplier(BlockType.class, "yellow_terracotta", () -> (BlockType) Blocks.YELLOW_TERRACOTTA)
            .registerSupplier(BlockType.class, "lime_terracotta", () -> (BlockType) Blocks.LIME_TERRACOTTA)
            .registerSupplier(BlockType.class, "pink_terracotta", () -> (BlockType) Blocks.PINK_TERRACOTTA)
            .registerSupplier(BlockType.class, "gray_terracotta", () -> (BlockType) Blocks.GRAY_TERRACOTTA)
            .registerSupplier(BlockType.class, "light_gray_terracotta", () -> (BlockType) Blocks.LIGHT_GRAY_TERRACOTTA)
            .registerSupplier(BlockType.class, "cyan_terracotta", () -> (BlockType) Blocks.CYAN_TERRACOTTA)
            .registerSupplier(BlockType.class, "purple_terracotta", () -> (BlockType) Blocks.PURPLE_TERRACOTTA)
            .registerSupplier(BlockType.class, "blue_terracotta", () -> (BlockType) Blocks.BLUE_TERRACOTTA)
            .registerSupplier(BlockType.class, "brown_terracotta", () -> (BlockType) Blocks.BROWN_TERRACOTTA)
            .registerSupplier(BlockType.class, "green_terracotta", () -> (BlockType) Blocks.GREEN_TERRACOTTA)
            .registerSupplier(BlockType.class, "red_terracotta", () -> (BlockType) Blocks.RED_TERRACOTTA)
            .registerSupplier(BlockType.class, "black_terracotta", () -> (BlockType) Blocks.BLACK_TERRACOTTA)
            .registerSupplier(BlockType.class, "white_stained_glass_pane", () -> (BlockType) Blocks.WHITE_STAINED_GLASS_PANE)
            .registerSupplier(BlockType.class, "orange_stained_glass_pane", () -> (BlockType) Blocks.ORANGE_STAINED_GLASS_PANE)
            .registerSupplier(BlockType.class, "magenta_stained_glass_pane", () -> (BlockType) Blocks.MAGENTA_STAINED_GLASS_PANE)
            .registerSupplier(BlockType.class, "light_blue_stained_glass_pane", () -> (BlockType) Blocks.LIGHT_BLUE_STAINED_GLASS_PANE)
            .registerSupplier(BlockType.class, "yellow_stained_glass_pane", () -> (BlockType) Blocks.YELLOW_STAINED_GLASS_PANE)
            .registerSupplier(BlockType.class, "lime_stained_glass_pane", () -> (BlockType) Blocks.LIME_STAINED_GLASS_PANE)
            .registerSupplier(BlockType.class, "pink_stained_glass_pane", () -> (BlockType) Blocks.PINK_STAINED_GLASS_PANE)
            .registerSupplier(BlockType.class, "gray_stained_glass_pane", () -> (BlockType) Blocks.GRAY_STAINED_GLASS_PANE)
            .registerSupplier(BlockType.class, "light_gray_stained_glass_pane", () -> (BlockType) Blocks.LIGHT_GRAY_STAINED_GLASS_PANE)
            .registerSupplier(BlockType.class, "cyan_stained_glass_pane", () -> (BlockType) Blocks.CYAN_STAINED_GLASS_PANE)
            .registerSupplier(BlockType.class, "purple_stained_glass_pane", () -> (BlockType) Blocks.PURPLE_STAINED_GLASS_PANE)
            .registerSupplier(BlockType.class, "blue_stained_glass_pane", () -> (BlockType) Blocks.BLUE_STAINED_GLASS_PANE)
            .registerSupplier(BlockType.class, "brown_stained_glass_pane", () -> (BlockType) Blocks.BROWN_STAINED_GLASS_PANE)
            .registerSupplier(BlockType.class, "green_stained_glass_pane", () -> (BlockType) Blocks.GREEN_STAINED_GLASS_PANE)
            .registerSupplier(BlockType.class, "red_stained_glass_pane", () -> (BlockType) Blocks.RED_STAINED_GLASS_PANE)
            .registerSupplier(BlockType.class, "black_stained_glass_pane", () -> (BlockType) Blocks.BLACK_STAINED_GLASS_PANE)
            .registerSupplier(BlockType.class, "acacia_stairs", () -> (BlockType) Blocks.ACACIA_STAIRS)
            .registerSupplier(BlockType.class, "dark_oak_stairs", () -> (BlockType) Blocks.DARK_OAK_STAIRS)
            .registerSupplier(BlockType.class, "slime_block", () -> (BlockType) Blocks.SLIME_BLOCK)
            .registerSupplier(BlockType.class, "barrier", () -> (BlockType) Blocks.BARRIER)
            .registerSupplier(BlockType.class, "iron_trapdoor", () -> (BlockType) Blocks.IRON_TRAPDOOR)
            .registerSupplier(BlockType.class, "prismarine", () -> (BlockType) Blocks.PRISMARINE)
            .registerSupplier(BlockType.class, "prismarine_bricks", () -> (BlockType) Blocks.PRISMARINE_BRICKS)
            .registerSupplier(BlockType.class, "dark_prismarine", () -> (BlockType) Blocks.DARK_PRISMARINE)
            .registerSupplier(BlockType.class, "prismarine_stairs", () -> (BlockType) Blocks.PRISMARINE_STAIRS)
            .registerSupplier(BlockType.class, "prismarine_brick_stairs", () -> (BlockType) Blocks.PRISMARINE_BRICK_STAIRS)
            .registerSupplier(BlockType.class, "dark_prismarine_stairs", () -> (BlockType) Blocks.DARK_PRISMARINE_STAIRS)
            .registerSupplier(BlockType.class, "prismarine_slab", () -> (BlockType) Blocks.PRISMARINE_SLAB)
            .registerSupplier(BlockType.class, "prismarine_brick_slab", () -> (BlockType) Blocks.PRISMARINE_BRICK_SLAB)
            .registerSupplier(BlockType.class, "dark_prismarine_slab", () -> (BlockType) Blocks.DARK_PRISMARINE_SLAB)
            .registerSupplier(BlockType.class, "sea_lantern", () -> (BlockType) Blocks.SEA_LANTERN)
            .registerSupplier(BlockType.class, "hay_block", () -> (BlockType) Blocks.HAY_BLOCK)
            .registerSupplier(BlockType.class, "white_carpet", () -> (BlockType) Blocks.WHITE_CARPET)
            .registerSupplier(BlockType.class, "orange_carpet", () -> (BlockType) Blocks.ORANGE_CARPET)
            .registerSupplier(BlockType.class, "magenta_carpet", () -> (BlockType) Blocks.MAGENTA_CARPET)
            .registerSupplier(BlockType.class, "light_blue_carpet", () -> (BlockType) Blocks.LIGHT_BLUE_CARPET)
            .registerSupplier(BlockType.class, "yellow_carpet", () -> (BlockType) Blocks.YELLOW_CARPET)
            .registerSupplier(BlockType.class, "lime_carpet", () -> (BlockType) Blocks.LIME_CARPET)
            .registerSupplier(BlockType.class, "pink_carpet", () -> (BlockType) Blocks.PINK_CARPET)
            .registerSupplier(BlockType.class, "gray_carpet", () -> (BlockType) Blocks.GRAY_CARPET)
            .registerSupplier(BlockType.class, "light_gray_carpet", () -> (BlockType) Blocks.LIGHT_GRAY_CARPET)
            .registerSupplier(BlockType.class, "cyan_carpet", () -> (BlockType) Blocks.CYAN_CARPET)
            .registerSupplier(BlockType.class, "purple_carpet", () -> (BlockType) Blocks.PURPLE_CARPET)
            .registerSupplier(BlockType.class, "blue_carpet", () -> (BlockType) Blocks.BLUE_CARPET)
            .registerSupplier(BlockType.class, "brown_carpet", () -> (BlockType) Blocks.BROWN_CARPET)
            .registerSupplier(BlockType.class, "green_carpet", () -> (BlockType) Blocks.GREEN_CARPET)
            .registerSupplier(BlockType.class, "red_carpet", () -> (BlockType) Blocks.RED_CARPET)
            .registerSupplier(BlockType.class, "black_carpet", () -> (BlockType) Blocks.BLACK_CARPET)
            .registerSupplier(BlockType.class, "terracotta", () -> (BlockType) Blocks.TERRACOTTA)
            .registerSupplier(BlockType.class, "coal_block", () -> (BlockType) Blocks.COAL_BLOCK)
            .registerSupplier(BlockType.class, "packed_ice", () -> (BlockType) Blocks.PACKED_ICE)
            .registerSupplier(BlockType.class, "sunflower", () -> (BlockType) Blocks.SUNFLOWER)
            .registerSupplier(BlockType.class, "lilac", () -> (BlockType) Blocks.LILAC)
            .registerSupplier(BlockType.class, "rose_bush", () -> (BlockType) Blocks.ROSE_BUSH)
            .registerSupplier(BlockType.class, "peony", () -> (BlockType) Blocks.PEONY)
            .registerSupplier(BlockType.class, "tall_grass", () -> (BlockType) Blocks.TALL_GRASS)
            .registerSupplier(BlockType.class, "large_fern", () -> (BlockType) Blocks.LARGE_FERN)
            .registerSupplier(BlockType.class, "white_banner", () -> (BlockType) Blocks.WHITE_BANNER)
            .registerSupplier(BlockType.class, "orange_banner", () -> (BlockType) Blocks.ORANGE_BANNER)
            .registerSupplier(BlockType.class, "magenta_banner", () -> (BlockType) Blocks.MAGENTA_BANNER)
            .registerSupplier(BlockType.class, "light_blue_banner", () -> (BlockType) Blocks.LIGHT_BLUE_BANNER)
            .registerSupplier(BlockType.class, "yellow_banner", () -> (BlockType) Blocks.YELLOW_BANNER)
            .registerSupplier(BlockType.class, "lime_banner", () -> (BlockType) Blocks.LIME_BANNER)
            .registerSupplier(BlockType.class, "pink_banner", () -> (BlockType) Blocks.PINK_BANNER)
            .registerSupplier(BlockType.class, "gray_banner", () -> (BlockType) Blocks.GRAY_BANNER)
            .registerSupplier(BlockType.class, "light_gray_banner", () -> (BlockType) Blocks.LIGHT_GRAY_BANNER)
            .registerSupplier(BlockType.class, "cyan_banner", () -> (BlockType) Blocks.CYAN_BANNER)
            .registerSupplier(BlockType.class, "purple_banner", () -> (BlockType) Blocks.PURPLE_BANNER)
            .registerSupplier(BlockType.class, "blue_banner", () -> (BlockType) Blocks.BLUE_BANNER)
            .registerSupplier(BlockType.class, "brown_banner", () -> (BlockType) Blocks.BROWN_BANNER)
            .registerSupplier(BlockType.class, "green_banner", () -> (BlockType) Blocks.GREEN_BANNER)
            .registerSupplier(BlockType.class, "red_banner", () -> (BlockType) Blocks.RED_BANNER)
            .registerSupplier(BlockType.class, "black_banner", () -> (BlockType) Blocks.BLACK_BANNER)
            .registerSupplier(BlockType.class, "white_wall_banner", () -> (BlockType) Blocks.WHITE_WALL_BANNER)
            .registerSupplier(BlockType.class, "orange_wall_banner", () -> (BlockType) Blocks.ORANGE_WALL_BANNER)
            .registerSupplier(BlockType.class, "magenta_wall_banner", () -> (BlockType) Blocks.MAGENTA_WALL_BANNER)
            .registerSupplier(BlockType.class, "light_blue_wall_banner", () -> (BlockType) Blocks.LIGHT_BLUE_WALL_BANNER)
            .registerSupplier(BlockType.class, "yellow_wall_banner", () -> (BlockType) Blocks.YELLOW_WALL_BANNER)
            .registerSupplier(BlockType.class, "lime_wall_banner", () -> (BlockType) Blocks.LIME_WALL_BANNER)
            .registerSupplier(BlockType.class, "pink_wall_banner", () -> (BlockType) Blocks.PINK_WALL_BANNER)
            .registerSupplier(BlockType.class, "gray_wall_banner", () -> (BlockType) Blocks.GRAY_WALL_BANNER)
            .registerSupplier(BlockType.class, "light_gray_wall_banner", () -> (BlockType) Blocks.LIGHT_GRAY_WALL_BANNER)
            .registerSupplier(BlockType.class, "cyan_wall_banner", () -> (BlockType) Blocks.CYAN_WALL_BANNER)
            .registerSupplier(BlockType.class, "purple_wall_banner", () -> (BlockType) Blocks.PURPLE_WALL_BANNER)
            .registerSupplier(BlockType.class, "blue_wall_banner", () -> (BlockType) Blocks.BLUE_WALL_BANNER)
            .registerSupplier(BlockType.class, "brown_wall_banner", () -> (BlockType) Blocks.BROWN_WALL_BANNER)
            .registerSupplier(BlockType.class, "green_wall_banner", () -> (BlockType) Blocks.GREEN_WALL_BANNER)
            .registerSupplier(BlockType.class, "red_wall_banner", () -> (BlockType) Blocks.RED_WALL_BANNER)
            .registerSupplier(BlockType.class, "black_wall_banner", () -> (BlockType) Blocks.BLACK_WALL_BANNER)
            .registerSupplier(BlockType.class, "red_sandstone", () -> (BlockType) Blocks.RED_SANDSTONE)
            .registerSupplier(BlockType.class, "chiseled_red_sandstone", () -> (BlockType) Blocks.CHISELED_RED_SANDSTONE)
            .registerSupplier(BlockType.class, "cut_red_sandstone", () -> (BlockType) Blocks.CUT_RED_SANDSTONE)
            .registerSupplier(BlockType.class, "red_sandstone_stairs", () -> (BlockType) Blocks.RED_SANDSTONE_STAIRS)
            .registerSupplier(BlockType.class, "oak_slab", () -> (BlockType) Blocks.OAK_SLAB)
            .registerSupplier(BlockType.class, "spruce_slab", () -> (BlockType) Blocks.SPRUCE_SLAB)
            .registerSupplier(BlockType.class, "birch_slab", () -> (BlockType) Blocks.BIRCH_SLAB)
            .registerSupplier(BlockType.class, "jungle_slab", () -> (BlockType) Blocks.JUNGLE_SLAB)
            .registerSupplier(BlockType.class, "acacia_slab", () -> (BlockType) Blocks.ACACIA_SLAB)
            .registerSupplier(BlockType.class, "dark_oak_slab", () -> (BlockType) Blocks.DARK_OAK_SLAB)
            .registerSupplier(BlockType.class, "stone_slab", () -> (BlockType) Blocks.STONE_SLAB)
            .registerSupplier(BlockType.class, "smooth_stone_slab", () -> (BlockType) Blocks.SMOOTH_STONE_SLAB)
            .registerSupplier(BlockType.class, "sandstone_slab", () -> (BlockType) Blocks.SANDSTONE_SLAB)
            .registerSupplier(BlockType.class, "cut_sandstone_slab", () -> (BlockType) Blocks.CUT_SANDSTONE_SLAB)
            .registerSupplier(BlockType.class, "petrified_oak_slab", () -> (BlockType) Blocks.PETRIFIED_OAK_SLAB)
            .registerSupplier(BlockType.class, "cobblestone_slab", () -> (BlockType) Blocks.COBBLESTONE_SLAB)
            .registerSupplier(BlockType.class, "brick_slab", () -> (BlockType) Blocks.BRICK_SLAB)
            .registerSupplier(BlockType.class, "stone_brick_slab", () -> (BlockType) Blocks.STONE_BRICK_SLAB)
            .registerSupplier(BlockType.class, "nether_brick_slab", () -> (BlockType) Blocks.NETHER_BRICK_SLAB)
            .registerSupplier(BlockType.class, "quartz_slab", () -> (BlockType) Blocks.QUARTZ_SLAB)
            .registerSupplier(BlockType.class, "red_sandstone_slab", () -> (BlockType) Blocks.RED_SANDSTONE_SLAB)
            .registerSupplier(BlockType.class, "cut_red_sandstone_slab", () -> (BlockType) Blocks.CUT_RED_SANDSTONE_SLAB)
            .registerSupplier(BlockType.class, "purpur_slab", () -> (BlockType) Blocks.PURPUR_SLAB)
            .registerSupplier(BlockType.class, "smooth_stone", () -> (BlockType) Blocks.SMOOTH_STONE)
            .registerSupplier(BlockType.class, "smooth_sandstone", () -> (BlockType) Blocks.SMOOTH_SANDSTONE)
            .registerSupplier(BlockType.class, "smooth_quartz", () -> (BlockType) Blocks.SMOOTH_QUARTZ)
            .registerSupplier(BlockType.class, "smooth_red_sandstone", () -> (BlockType) Blocks.SMOOTH_RED_SANDSTONE)
            .registerSupplier(BlockType.class, "spruce_fence_gate", () -> (BlockType) Blocks.SPRUCE_FENCE_GATE)
            .registerSupplier(BlockType.class, "birch_fence_gate", () -> (BlockType) Blocks.BIRCH_FENCE_GATE)
            .registerSupplier(BlockType.class, "jungle_fence_gate", () -> (BlockType) Blocks.JUNGLE_FENCE_GATE)
            .registerSupplier(BlockType.class, "acacia_fence_gate", () -> (BlockType) Blocks.ACACIA_FENCE_GATE)
            .registerSupplier(BlockType.class, "dark_oak_fence_gate", () -> (BlockType) Blocks.DARK_OAK_FENCE_GATE)
            .registerSupplier(BlockType.class, "spruce_fence", () -> (BlockType) Blocks.SPRUCE_FENCE)
            .registerSupplier(BlockType.class, "birch_fence", () -> (BlockType) Blocks.BIRCH_FENCE)
            .registerSupplier(BlockType.class, "jungle_fence", () -> (BlockType) Blocks.JUNGLE_FENCE)
            .registerSupplier(BlockType.class, "acacia_fence", () -> (BlockType) Blocks.ACACIA_FENCE)
            .registerSupplier(BlockType.class, "dark_oak_fence", () -> (BlockType) Blocks.DARK_OAK_FENCE)
            .registerSupplier(BlockType.class, "spruce_door", () -> (BlockType) Blocks.SPRUCE_DOOR)
            .registerSupplier(BlockType.class, "birch_door", () -> (BlockType) Blocks.BIRCH_DOOR)
            .registerSupplier(BlockType.class, "jungle_door", () -> (BlockType) Blocks.JUNGLE_DOOR)
            .registerSupplier(BlockType.class, "acacia_door", () -> (BlockType) Blocks.ACACIA_DOOR)
            .registerSupplier(BlockType.class, "dark_oak_door", () -> (BlockType) Blocks.DARK_OAK_DOOR)
            .registerSupplier(BlockType.class, "end_rod", () -> (BlockType) Blocks.END_ROD)
            .registerSupplier(BlockType.class, "chorus_plant", () -> (BlockType) Blocks.CHORUS_PLANT)
            .registerSupplier(BlockType.class, "chorus_flower", () -> (BlockType) Blocks.CHORUS_FLOWER)
            .registerSupplier(BlockType.class, "purpur_block", () -> (BlockType) Blocks.PURPUR_BLOCK)
            .registerSupplier(BlockType.class, "purpur_pillar", () -> (BlockType) Blocks.PURPUR_PILLAR)
            .registerSupplier(BlockType.class, "purpur_stairs", () -> (BlockType) Blocks.PURPUR_STAIRS)
            .registerSupplier(BlockType.class, "end_stone_bricks", () -> (BlockType) Blocks.END_STONE_BRICKS)
            .registerSupplier(BlockType.class, "beetroots", () -> (BlockType) Blocks.BEETROOTS)
            .registerSupplier(BlockType.class, "grass_path", () -> (BlockType) Blocks.GRASS_PATH)
            .registerSupplier(BlockType.class, "end_gateway", () -> (BlockType) Blocks.END_GATEWAY)
            .registerSupplier(BlockType.class, "repeating_command_block", () -> (BlockType) Blocks.REPEATING_COMMAND_BLOCK)
            .registerSupplier(BlockType.class, "chain_command_block", () -> (BlockType) Blocks.CHAIN_COMMAND_BLOCK)
            .registerSupplier(BlockType.class, "frosted_ice", () -> (BlockType) Blocks.FROSTED_ICE)
            .registerSupplier(BlockType.class, "magma_block", () -> (BlockType) Blocks.MAGMA_BLOCK)
            .registerSupplier(BlockType.class, "nether_wart_block", () -> (BlockType) Blocks.NETHER_WART_BLOCK)
            .registerSupplier(BlockType.class, "red_nether_bricks", () -> (BlockType) Blocks.RED_NETHER_BRICKS)
            .registerSupplier(BlockType.class, "bone_block", () -> (BlockType) Blocks.BONE_BLOCK)
            .registerSupplier(BlockType.class, "structure_void", () -> (BlockType) Blocks.STRUCTURE_VOID)
            .registerSupplier(BlockType.class, "observer", () -> (BlockType) Blocks.OBSERVER)
            .registerSupplier(BlockType.class, "shulker_box", () -> (BlockType) Blocks.SHULKER_BOX)
            .registerSupplier(BlockType.class, "white_shulker_box", () -> (BlockType) Blocks.WHITE_SHULKER_BOX)
            .registerSupplier(BlockType.class, "orange_shulker_box", () -> (BlockType) Blocks.ORANGE_SHULKER_BOX)
            .registerSupplier(BlockType.class, "magenta_shulker_box", () -> (BlockType) Blocks.MAGENTA_SHULKER_BOX)
            .registerSupplier(BlockType.class, "light_blue_shulker_box", () -> (BlockType) Blocks.LIGHT_BLUE_SHULKER_BOX)
            .registerSupplier(BlockType.class, "yellow_shulker_box", () -> (BlockType) Blocks.YELLOW_SHULKER_BOX)
            .registerSupplier(BlockType.class, "lime_shulker_box", () -> (BlockType) Blocks.LIME_SHULKER_BOX)
            .registerSupplier(BlockType.class, "pink_shulker_box", () -> (BlockType) Blocks.PINK_SHULKER_BOX)
            .registerSupplier(BlockType.class, "gray_shulker_box", () -> (BlockType) Blocks.GRAY_SHULKER_BOX)
            .registerSupplier(BlockType.class, "light_gray_shulker_box", () -> (BlockType) Blocks.LIGHT_GRAY_SHULKER_BOX)
            .registerSupplier(BlockType.class, "cyan_shulker_box", () -> (BlockType) Blocks.CYAN_SHULKER_BOX)
            .registerSupplier(BlockType.class, "purple_shulker_box", () -> (BlockType) Blocks.PURPLE_SHULKER_BOX)
            .registerSupplier(BlockType.class, "blue_shulker_box", () -> (BlockType) Blocks.BLUE_SHULKER_BOX)
            .registerSupplier(BlockType.class, "brown_shulker_box", () -> (BlockType) Blocks.BROWN_SHULKER_BOX)
            .registerSupplier(BlockType.class, "green_shulker_box", () -> (BlockType) Blocks.GREEN_SHULKER_BOX)
            .registerSupplier(BlockType.class, "red_shulker_box", () -> (BlockType) Blocks.RED_SHULKER_BOX)
            .registerSupplier(BlockType.class, "black_shulker_box", () -> (BlockType) Blocks.BLACK_SHULKER_BOX)
            .registerSupplier(BlockType.class, "white_glazed_terracotta", () -> (BlockType) Blocks.WHITE_GLAZED_TERRACOTTA)
            .registerSupplier(BlockType.class, "orange_glazed_terracotta", () -> (BlockType) Blocks.ORANGE_GLAZED_TERRACOTTA)
            .registerSupplier(BlockType.class, "magenta_glazed_terracotta", () -> (BlockType) Blocks.MAGENTA_GLAZED_TERRACOTTA)
            .registerSupplier(BlockType.class, "light_blue_glazed_terracotta", () -> (BlockType) Blocks.LIGHT_BLUE_GLAZED_TERRACOTTA)
            .registerSupplier(BlockType.class, "yellow_glazed_terracotta", () -> (BlockType) Blocks.YELLOW_GLAZED_TERRACOTTA)
            .registerSupplier(BlockType.class, "lime_glazed_terracotta", () -> (BlockType) Blocks.LIME_GLAZED_TERRACOTTA)
            .registerSupplier(BlockType.class, "pink_glazed_terracotta", () -> (BlockType) Blocks.PINK_GLAZED_TERRACOTTA)
            .registerSupplier(BlockType.class, "gray_glazed_terracotta", () -> (BlockType) Blocks.GRAY_GLAZED_TERRACOTTA)
            .registerSupplier(BlockType.class, "light_gray_glazed_terracotta", () -> (BlockType) Blocks.LIGHT_GRAY_GLAZED_TERRACOTTA)
            .registerSupplier(BlockType.class, "cyan_glazed_terracotta", () -> (BlockType) Blocks.CYAN_GLAZED_TERRACOTTA)
            .registerSupplier(BlockType.class, "purple_glazed_terracotta", () -> (BlockType) Blocks.PURPLE_GLAZED_TERRACOTTA)
            .registerSupplier(BlockType.class, "blue_glazed_terracotta", () -> (BlockType) Blocks.BLUE_GLAZED_TERRACOTTA)
            .registerSupplier(BlockType.class, "brown_glazed_terracotta", () -> (BlockType) Blocks.BROWN_GLAZED_TERRACOTTA)
            .registerSupplier(BlockType.class, "green_glazed_terracotta", () -> (BlockType) Blocks.GREEN_GLAZED_TERRACOTTA)
            .registerSupplier(BlockType.class, "red_glazed_terracotta", () -> (BlockType) Blocks.RED_GLAZED_TERRACOTTA)
            .registerSupplier(BlockType.class, "black_glazed_terracotta", () -> (BlockType) Blocks.BLACK_GLAZED_TERRACOTTA)
            .registerSupplier(BlockType.class, "white_concrete", () -> (BlockType) Blocks.WHITE_CONCRETE)
            .registerSupplier(BlockType.class, "orange_concrete", () -> (BlockType) Blocks.ORANGE_CONCRETE)
            .registerSupplier(BlockType.class, "magenta_concrete", () -> (BlockType) Blocks.MAGENTA_CONCRETE)
            .registerSupplier(BlockType.class, "light_blue_concrete", () -> (BlockType) Blocks.LIGHT_BLUE_CONCRETE)
            .registerSupplier(BlockType.class, "yellow_concrete", () -> (BlockType) Blocks.YELLOW_CONCRETE)
            .registerSupplier(BlockType.class, "lime_concrete", () -> (BlockType) Blocks.LIME_CONCRETE)
            .registerSupplier(BlockType.class, "pink_concrete", () -> (BlockType) Blocks.PINK_CONCRETE)
            .registerSupplier(BlockType.class, "gray_concrete", () -> (BlockType) Blocks.GRAY_CONCRETE)
            .registerSupplier(BlockType.class, "light_gray_concrete", () -> (BlockType) Blocks.LIGHT_GRAY_CONCRETE)
            .registerSupplier(BlockType.class, "cyan_concrete", () -> (BlockType) Blocks.CYAN_CONCRETE)
            .registerSupplier(BlockType.class, "purple_concrete", () -> (BlockType) Blocks.PURPLE_CONCRETE)
            .registerSupplier(BlockType.class, "blue_concrete", () -> (BlockType) Blocks.BLUE_CONCRETE)
            .registerSupplier(BlockType.class, "brown_concrete", () -> (BlockType) Blocks.BROWN_CONCRETE)
            .registerSupplier(BlockType.class, "green_concrete", () -> (BlockType) Blocks.GREEN_CONCRETE)
            .registerSupplier(BlockType.class, "red_concrete", () -> (BlockType) Blocks.RED_CONCRETE)
            .registerSupplier(BlockType.class, "black_concrete", () -> (BlockType) Blocks.BLACK_CONCRETE)
            .registerSupplier(BlockType.class, "white_concrete_powder", () -> (BlockType) Blocks.WHITE_CONCRETE_POWDER)
            .registerSupplier(BlockType.class, "orange_concrete_powder", () -> (BlockType) Blocks.ORANGE_CONCRETE_POWDER)
            .registerSupplier(BlockType.class, "magenta_concrete_powder", () -> (BlockType) Blocks.MAGENTA_CONCRETE_POWDER)
            .registerSupplier(BlockType.class, "light_blue_concrete_powder", () -> (BlockType) Blocks.LIGHT_BLUE_CONCRETE_POWDER)
            .registerSupplier(BlockType.class, "yellow_concrete_powder", () -> (BlockType) Blocks.YELLOW_CONCRETE_POWDER)
            .registerSupplier(BlockType.class, "lime_concrete_powder", () -> (BlockType) Blocks.LIME_CONCRETE_POWDER)
            .registerSupplier(BlockType.class, "pink_concrete_powder", () -> (BlockType) Blocks.PINK_CONCRETE_POWDER)
            .registerSupplier(BlockType.class, "gray_concrete_powder", () -> (BlockType) Blocks.GRAY_CONCRETE_POWDER)
            .registerSupplier(BlockType.class, "light_gray_concrete_powder", () -> (BlockType) Blocks.LIGHT_GRAY_CONCRETE_POWDER)
            .registerSupplier(BlockType.class, "cyan_concrete_powder", () -> (BlockType) Blocks.CYAN_CONCRETE_POWDER)
            .registerSupplier(BlockType.class, "purple_concrete_powder", () -> (BlockType) Blocks.PURPLE_CONCRETE_POWDER)
            .registerSupplier(BlockType.class, "blue_concrete_powder", () -> (BlockType) Blocks.BLUE_CONCRETE_POWDER)
            .registerSupplier(BlockType.class, "brown_concrete_powder", () -> (BlockType) Blocks.BROWN_CONCRETE_POWDER)
            .registerSupplier(BlockType.class, "green_concrete_powder", () -> (BlockType) Blocks.GREEN_CONCRETE_POWDER)
            .registerSupplier(BlockType.class, "red_concrete_powder", () -> (BlockType) Blocks.RED_CONCRETE_POWDER)
            .registerSupplier(BlockType.class, "black_concrete_powder", () -> (BlockType) Blocks.BLACK_CONCRETE_POWDER)
            .registerSupplier(BlockType.class, "kelp", () -> (BlockType) Blocks.KELP)
            .registerSupplier(BlockType.class, "kelp_plant", () -> (BlockType) Blocks.KELP_PLANT)
            .registerSupplier(BlockType.class, "dried_kelp_block", () -> (BlockType) Blocks.DRIED_KELP_BLOCK)
            .registerSupplier(BlockType.class, "turtle_egg", () -> (BlockType) Blocks.TURTLE_EGG)
            .registerSupplier(BlockType.class, "dead_tube_coral_block", () -> (BlockType) Blocks.DEAD_TUBE_CORAL_BLOCK)
            .registerSupplier(BlockType.class, "dead_brain_coral_block", () -> (BlockType) Blocks.DEAD_BRAIN_CORAL_BLOCK)
            .registerSupplier(BlockType.class, "dead_bubble_coral_block", () -> (BlockType) Blocks.DEAD_BUBBLE_CORAL_BLOCK)
            .registerSupplier(BlockType.class, "dead_fire_coral_block", () -> (BlockType) Blocks.DEAD_FIRE_CORAL_BLOCK)
            .registerSupplier(BlockType.class, "dead_horn_coral_block", () -> (BlockType) Blocks.DEAD_HORN_CORAL_BLOCK)
            .registerSupplier(BlockType.class, "tube_coral_block", () -> (BlockType) Blocks.TUBE_CORAL_BLOCK)
            .registerSupplier(BlockType.class, "brain_coral_block", () -> (BlockType) Blocks.BRAIN_CORAL_BLOCK)
            .registerSupplier(BlockType.class, "bubble_coral_block", () -> (BlockType) Blocks.BUBBLE_CORAL_BLOCK)
            .registerSupplier(BlockType.class, "fire_coral_block", () -> (BlockType) Blocks.FIRE_CORAL_BLOCK)
            .registerSupplier(BlockType.class, "horn_coral_block", () -> (BlockType) Blocks.HORN_CORAL_BLOCK)
            .registerSupplier(BlockType.class, "dead_tube_coral", () -> (BlockType) Blocks.DEAD_TUBE_CORAL)
            .registerSupplier(BlockType.class, "dead_brain_coral", () -> (BlockType) Blocks.DEAD_BRAIN_CORAL)
            .registerSupplier(BlockType.class, "dead_bubble_coral", () -> (BlockType) Blocks.DEAD_BUBBLE_CORAL)
            .registerSupplier(BlockType.class, "dead_fire_coral", () -> (BlockType) Blocks.DEAD_FIRE_CORAL)
            .registerSupplier(BlockType.class, "dead_horn_coral", () -> (BlockType) Blocks.DEAD_HORN_CORAL)
            .registerSupplier(BlockType.class, "tube_coral", () -> (BlockType) Blocks.TUBE_CORAL)
            .registerSupplier(BlockType.class, "brain_coral", () -> (BlockType) Blocks.BRAIN_CORAL)
            .registerSupplier(BlockType.class, "bubble_coral", () -> (BlockType) Blocks.BUBBLE_CORAL)
            .registerSupplier(BlockType.class, "fire_coral", () -> (BlockType) Blocks.FIRE_CORAL)
            .registerSupplier(BlockType.class, "horn_coral", () -> (BlockType) Blocks.HORN_CORAL)
            .registerSupplier(BlockType.class, "dead_tube_coral_fan", () -> (BlockType) Blocks.DEAD_TUBE_CORAL_FAN)
            .registerSupplier(BlockType.class, "dead_brain_coral_fan", () -> (BlockType) Blocks.DEAD_BRAIN_CORAL_FAN)
            .registerSupplier(BlockType.class, "dead_bubble_coral_fan", () -> (BlockType) Blocks.DEAD_BUBBLE_CORAL_FAN)
            .registerSupplier(BlockType.class, "dead_fire_coral_fan", () -> (BlockType) Blocks.DEAD_FIRE_CORAL_FAN)
            .registerSupplier(BlockType.class, "dead_horn_coral_fan", () -> (BlockType) Blocks.DEAD_HORN_CORAL_FAN)
            .registerSupplier(BlockType.class, "tube_coral_fan", () -> (BlockType) Blocks.TUBE_CORAL_FAN)
            .registerSupplier(BlockType.class, "brain_coral_fan", () -> (BlockType) Blocks.BRAIN_CORAL_FAN)
            .registerSupplier(BlockType.class, "bubble_coral_fan", () -> (BlockType) Blocks.BUBBLE_CORAL_FAN)
            .registerSupplier(BlockType.class, "fire_coral_fan", () -> (BlockType) Blocks.FIRE_CORAL_FAN)
            .registerSupplier(BlockType.class, "horn_coral_fan", () -> (BlockType) Blocks.HORN_CORAL_FAN)
            .registerSupplier(BlockType.class, "dead_tube_coral_wall_fan", () -> (BlockType) Blocks.DEAD_TUBE_CORAL_WALL_FAN)
            .registerSupplier(BlockType.class, "dead_brain_coral_wall_fan", () -> (BlockType) Blocks.DEAD_BRAIN_CORAL_WALL_FAN)
            .registerSupplier(BlockType.class, "dead_bubble_coral_wall_fan", () -> (BlockType) Blocks.DEAD_BUBBLE_CORAL_WALL_FAN)
            .registerSupplier(BlockType.class, "dead_fire_coral_wall_fan", () -> (BlockType) Blocks.DEAD_FIRE_CORAL_WALL_FAN)
            .registerSupplier(BlockType.class, "dead_horn_coral_wall_fan", () -> (BlockType) Blocks.DEAD_HORN_CORAL_WALL_FAN)
            .registerSupplier(BlockType.class, "tube_coral_wall_fan", () -> (BlockType) Blocks.TUBE_CORAL_WALL_FAN)
            .registerSupplier(BlockType.class, "brain_coral_wall_fan", () -> (BlockType) Blocks.BRAIN_CORAL_WALL_FAN)
            .registerSupplier(BlockType.class, "bubble_coral_wall_fan", () -> (BlockType) Blocks.BUBBLE_CORAL_WALL_FAN)
            .registerSupplier(BlockType.class, "fire_coral_wall_fan", () -> (BlockType) Blocks.FIRE_CORAL_WALL_FAN)
            .registerSupplier(BlockType.class, "horn_coral_wall_fan", () -> (BlockType) Blocks.HORN_CORAL_WALL_FAN)
            .registerSupplier(BlockType.class, "sea_pickle", () -> (BlockType) Blocks.SEA_PICKLE)
            .registerSupplier(BlockType.class, "blue_ice", () -> (BlockType) Blocks.BLUE_ICE)
            .registerSupplier(BlockType.class, "conduit", () -> (BlockType) Blocks.CONDUIT)
            .registerSupplier(BlockType.class, "bamboo_sapling", () -> (BlockType) Blocks.BAMBOO_SAPLING)
            .registerSupplier(BlockType.class, "bamboo", () -> (BlockType) Blocks.BAMBOO)
            .registerSupplier(BlockType.class, "potted_bamboo", () -> (BlockType) Blocks.POTTED_BAMBOO)
            .registerSupplier(BlockType.class, "void_air", () -> (BlockType) Blocks.VOID_AIR)
            .registerSupplier(BlockType.class, "cave_air", () -> (BlockType) Blocks.CAVE_AIR)
            .registerSupplier(BlockType.class, "bubble_column", () -> (BlockType) Blocks.BUBBLE_COLUMN)
            .registerSupplier(BlockType.class, "polished_granite_stairs", () -> (BlockType) Blocks.POLISHED_GRANITE_STAIRS)
            .registerSupplier(BlockType.class, "smooth_red_sandstone_stairs", () -> (BlockType) Blocks.SMOOTH_RED_SANDSTONE_STAIRS)
            .registerSupplier(BlockType.class, "mossy_stone_brick_stairs", () -> (BlockType) Blocks.MOSSY_STONE_BRICK_STAIRS)
            .registerSupplier(BlockType.class, "polished_diorite_stairs", () -> (BlockType) Blocks.POLISHED_DIORITE_STAIRS)
            .registerSupplier(BlockType.class, "mossy_cobblestone_stairs", () -> (BlockType) Blocks.MOSSY_COBBLESTONE_STAIRS)
            .registerSupplier(BlockType.class, "end_stone_brick_stairs", () -> (BlockType) Blocks.END_STONE_BRICK_STAIRS)
            .registerSupplier(BlockType.class, "stone_stairs", () -> (BlockType) Blocks.STONE_STAIRS)
            .registerSupplier(BlockType.class, "smooth_sandstone_stairs", () -> (BlockType) Blocks.SMOOTH_SANDSTONE_STAIRS)
            .registerSupplier(BlockType.class, "smooth_quartz_stairs", () -> (BlockType) Blocks.SMOOTH_QUARTZ_STAIRS)
            .registerSupplier(BlockType.class, "granite_stairs", () -> (BlockType) Blocks.GRANITE_STAIRS)
            .registerSupplier(BlockType.class, "andesite_stairs", () -> (BlockType) Blocks.ANDESITE_STAIRS)
            .registerSupplier(BlockType.class, "red_nether_brick_stairs", () -> (BlockType) Blocks.RED_NETHER_BRICK_STAIRS)
            .registerSupplier(BlockType.class, "polished_andesite_stairs", () -> (BlockType) Blocks.POLISHED_ANDESITE_STAIRS)
            .registerSupplier(BlockType.class, "diorite_stairs", () -> (BlockType) Blocks.DIORITE_STAIRS)
            .registerSupplier(BlockType.class, "polished_granite_slab", () -> (BlockType) Blocks.POLISHED_GRANITE_SLAB)
            .registerSupplier(BlockType.class, "smooth_red_sandstone_slab", () -> (BlockType) Blocks.SMOOTH_RED_SANDSTONE_SLAB)
            .registerSupplier(BlockType.class, "mossy_stone_brick_slab", () -> (BlockType) Blocks.MOSSY_STONE_BRICK_SLAB)
            .registerSupplier(BlockType.class, "polished_diorite_slab", () -> (BlockType) Blocks.POLISHED_DIORITE_SLAB)
            .registerSupplier(BlockType.class, "mossy_cobblestone_slab", () -> (BlockType) Blocks.MOSSY_COBBLESTONE_SLAB)
            .registerSupplier(BlockType.class, "end_stone_brick_slab", () -> (BlockType) Blocks.END_STONE_BRICK_SLAB)
            .registerSupplier(BlockType.class, "smooth_sandstone_slab", () -> (BlockType) Blocks.SMOOTH_SANDSTONE_SLAB)
            .registerSupplier(BlockType.class, "smooth_quartz_slab", () -> (BlockType) Blocks.SMOOTH_QUARTZ_SLAB)
            .registerSupplier(BlockType.class, "granite_slab", () -> (BlockType) Blocks.GRANITE_SLAB)
            .registerSupplier(BlockType.class, "andesite_slab", () -> (BlockType) Blocks.ANDESITE_SLAB)
            .registerSupplier(BlockType.class, "red_nether_brick_slab", () -> (BlockType) Blocks.RED_NETHER_BRICK_SLAB)
            .registerSupplier(BlockType.class, "polished_andesite_slab", () -> (BlockType) Blocks.POLISHED_ANDESITE_SLAB)
            .registerSupplier(BlockType.class, "diorite_slab", () -> (BlockType) Blocks.DIORITE_SLAB)
            .registerSupplier(BlockType.class, "brick_wall", () -> (BlockType) Blocks.BRICK_WALL)
            .registerSupplier(BlockType.class, "prismarine_wall", () -> (BlockType) Blocks.PRISMARINE_WALL)
            .registerSupplier(BlockType.class, "red_sandstone_wall", () -> (BlockType) Blocks.RED_SANDSTONE_WALL)
            .registerSupplier(BlockType.class, "mossy_stone_brick_wall", () -> (BlockType) Blocks.MOSSY_STONE_BRICK_WALL)
            .registerSupplier(BlockType.class, "granite_wall", () -> (BlockType) Blocks.GRANITE_WALL)
            .registerSupplier(BlockType.class, "stone_brick_wall", () -> (BlockType) Blocks.STONE_BRICK_WALL)
            .registerSupplier(BlockType.class, "nether_brick_wall", () -> (BlockType) Blocks.NETHER_BRICK_WALL)
            .registerSupplier(BlockType.class, "andesite_wall", () -> (BlockType) Blocks.ANDESITE_WALL)
            .registerSupplier(BlockType.class, "red_nether_brick_wall", () -> (BlockType) Blocks.RED_NETHER_BRICK_WALL)
            .registerSupplier(BlockType.class, "sandstone_wall", () -> (BlockType) Blocks.SANDSTONE_WALL)
            .registerSupplier(BlockType.class, "end_stone_brick_wall", () -> (BlockType) Blocks.END_STONE_BRICK_WALL)
            .registerSupplier(BlockType.class, "diorite_wall", () -> (BlockType) Blocks.DIORITE_WALL)
            .registerSupplier(BlockType.class, "scaffolding", () -> (BlockType) Blocks.SCAFFOLDING)
            .registerSupplier(BlockType.class, "loom", () -> (BlockType) Blocks.LOOM)
            .registerSupplier(BlockType.class, "barrel", () -> (BlockType) Blocks.BARREL)
            .registerSupplier(BlockType.class, "smoker", () -> (BlockType) Blocks.SMOKER)
            .registerSupplier(BlockType.class, "blast_furnace", () -> (BlockType) Blocks.BLAST_FURNACE)
            .registerSupplier(BlockType.class, "cartography_table", () -> (BlockType) Blocks.CARTOGRAPHY_TABLE)
            .registerSupplier(BlockType.class, "fletching_table", () -> (BlockType) Blocks.FLETCHING_TABLE)
            .registerSupplier(BlockType.class, "grindstone", () -> (BlockType) Blocks.GRINDSTONE)
            .registerSupplier(BlockType.class, "lectern", () -> (BlockType) Blocks.LECTERN)
            .registerSupplier(BlockType.class, "smithing_table", () -> (BlockType) Blocks.SMITHING_TABLE)
            .registerSupplier(BlockType.class, "stonecutter", () -> (BlockType) Blocks.STONECUTTER)
            .registerSupplier(BlockType.class, "bell", () -> (BlockType) Blocks.BELL)
            .registerSupplier(BlockType.class, "lantern", () -> (BlockType) Blocks.LANTERN)
            .registerSupplier(BlockType.class, "campfire", () -> (BlockType) Blocks.CAMPFIRE)
            .registerSupplier(BlockType.class, "sweet_berry_bush", () -> (BlockType) Blocks.SWEET_BERRY_BUSH)
            .registerSupplier(BlockType.class, "structure_block", () -> (BlockType) Blocks.STRUCTURE_BLOCK)
            .registerSupplier(BlockType.class, "jigsaw", () -> (BlockType) Blocks.JIGSAW)
            .registerSupplier(BlockType.class, "composter", () -> (BlockType) Blocks.COMPOSTER)
            .registerSupplier(BlockType.class, "bee_nest", () -> (BlockType) Blocks.BEE_NEST)
            .registerSupplier(BlockType.class, "beehive", () -> (BlockType) Blocks.BEEHIVE)
            .registerSupplier(BlockType.class, "honey_block", () -> (BlockType) Blocks.HONEY_BLOCK)
            .registerSupplier(BlockType.class, "honeycomb_block", () -> (BlockType) Blocks.HONEYCOMB_BLOCK)
        ;
    }
}
